@comment{
  sub templates must be declared at the top
}

@declare{'fooTemplate'}
 in foo!
@end{}

@declare{'convParam_int'}
@{param.name}
@end{}

@declare{'convParam_double'}
@{param.name}
@end{}

@declare{'convParam_java_lang_String'}
@{param.name}
@end{}

@declare{'convParam_org_vertx_java_core_json_JsonObject'}
new io.vertx.foo.JsonObject(JSON.stringify(@{param.name}))
@end{}

@declare{'convParam_Handler_org_vertx_java_core_json_JsonObject'}
function(jVal) { @{param.name}(JSON.parse(ret.encode())) }
@end{}

@declare{'convParam_Handler_java_lang_Void'}
@{param.name}
@end{}

@declare{'convParam_HandlerAsyncResult_org_vertx_java_core_net_NetServer'}
function(ar) { if (ar.succeeded()) { @{param.name}(@{ifaceName}, null) } else { @{param.name}(null, ar.cause()) }}
@end{}

@declare{'convParam_HandlerAsyncResult_java_lang_Void'}
function(ar) { if (ar.succeeded()) { @{param.name}(null, null) } else { @{param.name}(null, ar.cause()); }}
@end{}

@declare{'convParam_Handler_org_vertx_java_core_net_NetSocket'}
function(jVal) { @{param.name}(new NetSocket(jVal)) }
@end{}

@declare{'convParam_org_vertx_java_core_buffer_Buffer'}
@{param.name}._j_del
@end{}

@declare{'convReturn_org_vertx_java_core_json_JsonObject'}
JSON.parse(ret.encode())
@end{}

@comment{ FIXME! }
@declare{'convReturn_java_net_InetSocketAddress'}
ret
@end{}

@declare{'convReturn_java_lang_String'}
ret
@end{}

@declare{'convReturn_int'}
ret
@end{}

@declare{'convReturn_boolean'}
ret
@end{}

// Here is our generated JavaScript module\n\n

// Require stuff that we need\n
@foreach{referencedType : referencedTypes}
var @{helper.getSimpleName(referencedType)} = require('@{helper.convertCamelCaseToFileNameWithUnderscores(helper.getSimpleName(referencedType))}');\n
@end{}
\n

@code{ifaceName = helper.decapitaliseFirstLetter(ifaceSimpleName)}
// The JavaScript object that represents the @{ifaceSimpleName}\n
var @{ifaceName} = {};\n\n
// The Java delegate\n
var j_@{ifaceName};\n\n
// Constructor\n\n
/*\n
@{ifaceComment}
*/\n
var @{ifaceSimpleName} = function(j_val) {\n
  j_@{ifaceName} = j_val;\n
};\n
\n
// The public functions\n
// --------------------\n\n
@foreach{method : methods}
/*\n
@{method.comment}
*/\n
@{ifaceName}.@{method.name} = function(@foreach{param: method.params}@{param.name}@end{", "}) {\n
@if{!method.fluent && !method.returnType.equals("void")}
  var ret = j_@{ifaceName}.@{method.name}(
@else{}
  j_@{ifaceName}.@{method.name}(
@end{}
@foreach{param: method.params}
@if{param.asyncResultHandlerParam}
@code{convTemplate="convParam_HandlerAsyncResult_" + helper.convertDotsToUnderscore(param.genericHandlerType)}
@else{param.handlerParam}
@code{convTemplate="convParam_Handler_" + helper.convertDotsToUnderscore(param.genericHandlerType)}
@else{}
@code{convTemplate="convParam_" + helper.convertDotsToUnderscore(param.type)}
@end{}
@includeNamed{convTemplate}
@end{", "});\n
@if{!method.returnType.equals("void")}
@if{method.fluent}
  return @{ifaceName};\n
@else{}
@code{returnTemplate="convReturn_" + helper.convertDotsToUnderscore(method.returnType)}
  return @includeNamed{returnTemplate};\n
@end{}
@end{}
};\n\n
@end{}
// End public functions\n
// --------------------\n\n
// We export the Constructor function\n
module.exports = @{ifaceSimpleName};





